searchNodes=[{"doc":"Macro module of MapSchema.","ref":"MapSchema.html","title":"MapSchema","type":"module"},{"doc":"The base installsimple constructor new/0schema getter schema/0","ref":"MapSchema.Base.html","title":"MapSchema.Base","type":"module"},{"doc":"","ref":"MapSchema.Base.html#install/1","title":"MapSchema.Base.install/1","type":"function"},{"doc":"The Check module compone the macros that let us, build the methods is_valid?:is_valid?(map)","ref":"MapSchema.Check.html","title":"MapSchema.Check","type":"module"},{"doc":"","ref":"MapSchema.Check.html#install/0","title":"MapSchema.Check.install/0","type":"function"},{"doc":"","ref":"MapSchema.Examples.Person.html","title":"MapSchema.Examples.Person","type":"module"},{"doc":"Get age value of integer type.","ref":"MapSchema.Examples.Person.html#get_age/1","title":"MapSchema.Examples.Person.get_age/1","type":"function"},{"doc":"Get contact_email value of string type.","ref":"MapSchema.Examples.Person.html#get_contact_email/1","title":"MapSchema.Examples.Person.get_contact_email/1","type":"function"},{"doc":"Get contact_others value of any type.","ref":"MapSchema.Examples.Person.html#get_contact_others/1","title":"MapSchema.Examples.Person.get_contact_others/1","type":"function"},{"doc":"Get contact_phone value of string type.","ref":"MapSchema.Examples.Person.html#get_contact_phone/1","title":"MapSchema.Examples.Person.get_contact_phone/1","type":"function"},{"doc":"Get country value of string type.","ref":"MapSchema.Examples.Person.html#get_country/1","title":"MapSchema.Examples.Person.get_country/1","type":"function"},{"doc":"Get name value of string type.","ref":"MapSchema.Examples.Person.html#get_name/1","title":"MapSchema.Examples.Person.get_name/1","type":"function"},{"doc":"Get surname value of string type.","ref":"MapSchema.Examples.Person.html#get_surname/1","title":"MapSchema.Examples.Person.get_surname/1","type":"function"},{"doc":"It´s will return true, if the map follow the schema.","ref":"MapSchema.Examples.Person.html#is_valid?/1","title":"MapSchema.Examples.Person.is_valid?/1","type":"function"},{"doc":"Let decode json to Object. Checking every type following the schema.Note: This method use Jason library.","ref":"MapSchema.Examples.Person.html#json_decode/1","title":"MapSchema.Examples.Person.json_decode/1","type":"function"},{"doc":"Let decode json and mut a existing object . Checking every type following the schema. Intenal it´s using the method put/2.Note: This method use Jason library.Parametersmapa: Objectjson: Json object","ref":"MapSchema.Examples.Person.html#json_decode/2","title":"MapSchema.Examples.Person.json_decode/2","type":"function"},{"doc":"Let encode object to Json.Note: This method use Jason library.","ref":"MapSchema.Examples.Person.html#json_encode/1","title":"MapSchema.Examples.Person.json_encode/1","type":"function"},{"doc":"Change the value of age field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that age is integer type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_age(fn(_old)-&gt; 30 end) iex&gt; Elixir.MapSchema.Examples.Person.get_age(obj) 30","ref":"MapSchema.Examples.Person.html#mut_age/2","title":"MapSchema.Examples.Person.mut_age/2","type":"function"},{"doc":"Change the value of contact_email field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that contact_email is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_contact_email(fn(_old)-&gt; &quot;Sevilla&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_contact_email(obj) &quot;Sevilla&quot;","ref":"MapSchema.Examples.Person.html#mut_contact_email/2","title":"MapSchema.Examples.Person.mut_contact_email/2","type":"function"},{"doc":"Change the value of contact_others field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that contact_others is any type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_contact_others(fn(_old)-&gt; &quot;its_anything&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_contact_others(obj) &quot;its_anything&quot;","ref":"MapSchema.Examples.Person.html#mut_contact_others/2","title":"MapSchema.Examples.Person.mut_contact_others/2","type":"function"},{"doc":"Change the value of contact_phone field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that contact_phone is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_contact_phone(fn(_old)-&gt; &quot;Sevilla&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_contact_phone(obj) &quot;Sevilla&quot;","ref":"MapSchema.Examples.Person.html#mut_contact_phone/2","title":"MapSchema.Examples.Person.mut_contact_phone/2","type":"function"},{"doc":"Change the value of country field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that country is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_country(fn(_old)-&gt; &quot;Barcelona&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_country(obj) &quot;Barcelona&quot;","ref":"MapSchema.Examples.Person.html#mut_country/2","title":"MapSchema.Examples.Person.mut_country/2","type":"function"},{"doc":"Change the value of name field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that name is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_name(fn(_old)-&gt; &quot;Galicia&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_name(obj) &quot;Galicia&quot;","ref":"MapSchema.Examples.Person.html#mut_name/2","title":"MapSchema.Examples.Person.mut_name/2","type":"function"},{"doc":"Change the value of surname field, using a mut_fn.(actualValue) that will recive the actual value. Before of update the valor will be check it.Remember that surname is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.mut_surname(fn(_old)-&gt; &quot;Santander&quot; end) iex&gt; Elixir.MapSchema.Examples.Person.get_surname(obj) &quot;Santander&quot;","ref":"MapSchema.Examples.Person.html#mut_surname/2","title":"MapSchema.Examples.Person.mut_surname/2","type":"function"},{"doc":"This method only create a new simple map %{}. Yes.Because the idea it´s the data structure will be independent of MapSchema but the module will have the schema that the maps should be follow.Example: iex&gt;Elixir.MapSchema.Examples.Person.new() %{}","ref":"MapSchema.Examples.Person.html#new/0","title":"MapSchema.Examples.Person.new/0","type":"function"},{"doc":"Put a new value in each field of the update map, in the field of the object.But before of update the values always will be check the type.","ref":"MapSchema.Examples.Person.html#put/1","title":"MapSchema.Examples.Person.put/1","type":"function"},{"doc":"Put a new value in each field of the update map, in the field of the object.But before of update the values always will be check the type.","ref":"MapSchema.Examples.Person.html#put/2","title":"MapSchema.Examples.Person.put/2","type":"function"},{"doc":"Put a new value in age field. Before of update the valor will be check it.Remember that age is integer type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_age(5) iex&gt; Elixir.MapSchema.Examples.Person.get_age(obj) 5","ref":"MapSchema.Examples.Person.html#put_age/2","title":"MapSchema.Examples.Person.put_age/2","type":"function"},{"doc":"Put a new value in contact_email field. Before of update the valor will be check it.Remember that contact_email is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_contact_email(&quot;Galicia&quot;) iex&gt; Elixir.MapSchema.Examples.Person.get_contact_email(obj) &quot;Galicia&quot;","ref":"MapSchema.Examples.Person.html#put_contact_email/2","title":"MapSchema.Examples.Person.put_contact_email/2","type":"function"},{"doc":"Put a new value in contact_others field.","ref":"MapSchema.Examples.Person.html#put_contact_others/2","title":"MapSchema.Examples.Person.put_contact_others/2","type":"function"},{"doc":"Put a new value in contact_phone field. Before of update the valor will be check it.Remember that contact_phone is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_contact_phone(&quot;Barcelona&quot;) iex&gt; Elixir.MapSchema.Examples.Person.get_contact_phone(obj) &quot;Barcelona&quot;","ref":"MapSchema.Examples.Person.html#put_contact_phone/2","title":"MapSchema.Examples.Person.put_contact_phone/2","type":"function"},{"doc":"Put a new value in country field. Before of update the valor will be check it.Remember that country is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_country(&quot;Galicia&quot;) iex&gt; Elixir.MapSchema.Examples.Person.get_country(obj) &quot;Galicia&quot;","ref":"MapSchema.Examples.Person.html#put_country/2","title":"MapSchema.Examples.Person.put_country/2","type":"function"},{"doc":"Put a new value in name field. Before of update the valor will be check it.Remember that name is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_name(&quot;Galicia&quot;) iex&gt; Elixir.MapSchema.Examples.Person.get_name(obj) &quot;Galicia&quot;","ref":"MapSchema.Examples.Person.html#put_name/2","title":"MapSchema.Examples.Person.put_name/2","type":"function"},{"doc":"Put a new value in surname field. Before of update the valor will be check it.Remember that surname is string type.Example: iex&gt;obj = Elixir.MapSchema.Examples.Person.new() ...&gt; |&gt; Elixir.MapSchema.Examples.Person.put_surname(&quot;Sevilla&quot;) iex&gt; Elixir.MapSchema.Examples.Person.get_surname(obj) &quot;Sevilla&quot;","ref":"MapSchema.Examples.Person.html#put_surname/2","title":"MapSchema.Examples.Person.put_surname/2","type":"function"},{"doc":"The Schema is: %{&quot;age&quot; =&gt; :integer, &quot;contact&quot; =&gt; %{&quot;email&quot; =&gt; :string, &quot;others&quot; =&gt; :any, &quot;phone&quot; =&gt; :string}, &quot;country&quot; =&gt; :string, &quot;name&quot; =&gt; :string, &quot;surname&quot; =&gt; :string}","ref":"MapSchema.Examples.Person.html#schema/0","title":"MapSchema.Examples.Person.schema/0","type":"function"},{"doc":"Elixir UnOfficial Extension of String module","ref":"MapSchema.ExuString.html","title":"MapSchema.ExuString","type":"module"},{"doc":"Check if a string is floatWhy is interestingThis method let you check a String is float.Target of proposalKeep simple codeExamplesiex&gt; MapSchema.ExuString.is_float?(&quot;1&quot;) false iex&gt; MapSchema.ExuString.is_float?(&quot;-0.10&quot;) true iex&gt; MapSchema.ExuString.is_float?(&quot;10.0000000&quot;) true iex&gt; MapSchema.ExuString.is_float?(&quot;10.1&quot;) true iex&gt; MapSchema.ExuString.is_float?(&quot;invalid_float&quot;) false iex&gt; MapSchema.ExuString.is_float?(:invalid_string) false iex&gt; [&quot;1.2&quot;,&quot;3.1&quot;,&quot;invalid&quot;] |&gt; Enum.all?(&amp;MapSchema.ExuString.is_float?(&amp;1)) false","ref":"MapSchema.ExuString.html#is_float?/1","title":"MapSchema.ExuString.is_float?/1","type":"function"},{"doc":"Check if a string is integerWhy is interestingThis method let you check a String is integer.Target of proposalKeep simple codeExamplesiex&gt; MapSchema.ExuString.is_integer?(&quot;1&quot;) true iex&gt; MapSchema.ExuString.is_integer?(&quot;-1&quot;) true iex&gt; MapSchema.ExuString.is_integer?(&quot;10.0&quot;) false iex&gt; MapSchema.ExuString.is_integer?(&quot;10.1&quot;) false iex&gt; MapSchema.ExuString.is_integer?(&quot;invalid_integer&quot;) false iex&gt; MapSchema.ExuString.is_integer?(:invalid_string) false iex&gt; [&quot;1&quot;,&quot;3&quot;,&quot;invalid&quot;] |&gt; Enum.all?(&amp;MapSchema.ExuString.is_integer?(&amp;1)) false","ref":"MapSchema.ExuString.html#is_integer?/1","title":"MapSchema.ExuString.is_integer?/1","type":"function"},{"doc":"Parse string to FloatWhy is interestingThis method let you cast fast a String to float without require use a official Float.parse/2 that return a tuple. This method return an float number or :errorTarget of proposalKeep simple codeExamplesiex&gt; MapSchema.ExuString.to_float!(&quot;1&quot;) :error iex&gt; MapSchema.ExuString.to_float!(&quot;-0.10&quot;) -0.10 iex&gt; MapSchema.ExuString.to_float!(&quot;10.0000000&quot;) 10.0 iex&gt; MapSchema.ExuString.to_float!(&quot;10.1&quot;) 10.1 iex&gt; MapSchema.ExuString.to_float!(&quot;invalid_float&quot;) :error iex&gt; MapSchema.ExuString.to_float!(:invalid_string) :error iex&gt; [&quot;1.1&quot;,&quot;3.3&quot;,&quot;invalid&quot;] |&gt; Enum.map(&amp;MapSchema.ExuString.to_float!(&amp;1)) [1.1,3.3,:error]","ref":"MapSchema.ExuString.html#to_float!/1","title":"MapSchema.ExuString.to_float!/1","type":"function"},{"doc":"Parse string to IntegerWhy is interestingThis method let you cast fast a String to integer without require use a official Integer.parse/2 that return a tuple. This method return an integer number or :error.Target of proposalKeep simple codeExamplesiex&gt; MapSchema.ExuString.to_integer!(&quot;1&quot;) 1 iex&gt; MapSchema.ExuString.to_integer!(&quot;-1&quot;) -1 iex&gt; MapSchema.ExuString.to_integer!(&quot;10.0&quot;) :error iex&gt; MapSchema.ExuString.to_integer!(&quot;10.1&quot;) :error iex&gt; MapSchema.ExuString.to_integer!(&quot;invalid_integer&quot;) :error iex&gt; MapSchema.ExuString.to_integer!(:invalid_string) :error iex&gt; [&quot;1&quot;,&quot;3&quot;,&quot;invalid&quot;] |&gt; Enum.map(&amp;MapSchema.ExuString.to_integer!(&amp;1)) [1,3,:error]","ref":"MapSchema.ExuString.html#to_integer!/1","title":"MapSchema.ExuString.to_integer!/1","type":"function"},{"doc":"The Gets module compone the macros that let us, build the methods get:get(map)","ref":"MapSchema.Gets.html","title":"MapSchema.Gets","type":"module"},{"doc":"","ref":"MapSchema.Gets.html#install/2","title":"MapSchema.Gets.install/2","type":"function"},{"doc":"The JsonEncoding module compone the macros that let us, build the methods:json_encode(map) Take a map and cast to json string format.json_encode(json) Take a json string format and build a map, following the rules of schema.Note:It´s check the data types.json_encode(mapa, json) Take a json string format and build a map, change the values of the actual map following the rules of schema.Note:It´s check the data types.","ref":"MapSchema.JsonEncoding.html","title":"MapSchema.JsonEncoding","type":"module"},{"doc":"","ref":"MapSchema.JsonEncoding.html#install/0","title":"MapSchema.JsonEncoding.install/0","type":"function"},{"doc":"The module have the internal functionality of the methods get","ref":"MapSchema.Methods.Gets.html","title":"MapSchema.Methods.Gets","type":"module"},{"doc":"","ref":"MapSchema.Methods.Gets.html#generic_get/2","title":"MapSchema.Methods.Gets.generic_get/2","type":"function"},{"doc":"The module have the internal functionality of the methods put_partial","ref":"MapSchema.Methods.PutPartial.html","title":"MapSchema.Methods.PutPartial","type":"module"},{"doc":"","ref":"MapSchema.Methods.PutPartial.html#put/3","title":"MapSchema.Methods.PutPartial.put/3","type":"function"},{"doc":"The module have the internal functionality of the methods puts","ref":"MapSchema.Methods.Puts.html","title":"MapSchema.Methods.Puts","type":"module"},{"doc":"","ref":"MapSchema.Methods.Puts.html#generic_put/3","title":"MapSchema.Methods.Puts.generic_put/3","type":"function"},{"doc":"The muts module compone the macros that let us, build the methods mut:mut_$field(map,fn(oldValue)-&gt; ... newValue end)","ref":"MapSchema.Muts.html","title":"MapSchema.Muts","type":"module"},{"doc":"","ref":"MapSchema.Muts.html#install/2","title":"MapSchema.Muts.install/2","type":"function"},{"doc":"The PropMethods module install for each field the macros gets, puts and alter","ref":"MapSchema.PropMethods.html","title":"MapSchema.PropMethods","type":"module"},{"doc":"","ref":"MapSchema.PropMethods.html#install/1","title":"MapSchema.PropMethods.install/1","type":"function"},{"doc":"The PutPartial module compone the macros that let us build the put/2 that put a new values usign a map.It´s method check the type of every property following the schema.Example:person = Person.new() |&gt; Person.put(%{&quot;name&quot; =&gt; &quot;ric&quot;, &quot;age&quot;=&gt; 29}) assert Person.get_name(person) == &quot;ric&quot; assert Person.get_age(person) == 29","ref":"MapSchema.PutPartial.html","title":"MapSchema.PutPartial","type":"module"},{"doc":"","ref":"MapSchema.PutPartial.html#install/0","title":"MapSchema.PutPartial.install/0","type":"function"},{"doc":"The Puts module compone the macros that let us, build the methods put:put(map,field,value)","ref":"MapSchema.Puts.html","title":"MapSchema.Puts","type":"module"},{"doc":"","ref":"MapSchema.Puts.html#install/2","title":"MapSchema.Puts.install/2","type":"function"},{"doc":"The module have the utils functions.","ref":"MapSchema.Utils.html","title":"MapSchema.Utils","type":"module"},{"doc":"Take a type of data and returns a tuple {testing_value, testing_result} with the example values that we used in doctest.","ref":"MapSchema.Utils.html#build_test_values/1","title":"MapSchema.Utils.build_test_values/1","type":"function"},{"doc":"Take list of fields and build a full name.","ref":"MapSchema.Utils.html#get_field_name/1","title":"MapSchema.Utils.get_field_name/1","type":"function"},{"doc":"Take a type of data and return the guard that we need use for check the value.","ref":"MapSchema.Utils.html#get_guard_by_type/1","title":"MapSchema.Utils.get_guard_by_type/1","type":"function"},{"doc":"The field of schema can save flexible content, if the user say that it use a :map, :list, or any custom type. In this cases we wont check the type of data.","ref":"MapSchema.Utils.html#is_flexible_nested?/1","title":"MapSchema.Utils.is_flexible_nested?/1","type":"function"},{"doc":"The module have the utils for testing","ref":"MapSchema.Utils.Testing.html","title":"MapSchema.Utils.Testing","type":"module"},{"doc":"","ref":"MapSchema.Utils.Testing.html#generate_random_test_value/1","title":"MapSchema.Utils.Testing.generate_random_test_value/1","type":"function"}]